"""
Django settings for botos project.

Generated by 'django-admin startproject' using Django 2.2.2.

For more information on this file, see
https://docs.djangoproject.com/en/2.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.2/ref/settings/
"""

import os
import sys

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# The debug flag should be turned on when in development. Only disable it in
# staging/production.
try:
    debug_env_val = os.environ['BOTOS_DEBUG']
except KeyError:
    sys.exit('Environment variable, BOTOS_DEBUG, does not exist. '     \
             'Make sure that said variable exists and has any of the ' \
             'following values:'                                       \
             '  True, 1, False, or 0')
else:
    if debug_env_val == 'True' or debug_env_val == '1':
        DEBUG = True
    elif debug_env_val == 'False' or debug_env_val == '0':
        DEBUG = False
    else:
        sys.exit('Environment variable, BOTOS_DEBUG, was given an ' \
                 'unsupported value. The supported values are:'     \
                 '  True, 1, False, and 0')

# Secret key.
if DEBUG:
    SECRET_KEY = 'T6xtu*&k8@)pibt(^c2ox%@#3taw0zp_g05e28g!#0j3gjrf2!RAVIS'
else:
    try:
        secret_key_val = os.environ['BOTOS_SECRET_KEY']
    except KeyError:
        sys.exit('Environment variable, BOTOS_SECRET_KEY, does not exist!' \
                 'And in a production environment?! Outrageous!')
    else:
        SECRET_KEY = secret_key_val

# Database setup
try:
    db_host = os.environ['BOTOS_DATABASE_HOST']
    db_port = os.environ['BOTOS_DATABASE_PORT']
    db_name = os.environ['BOTOS_DATABASE_NAME']
    db_username = os.environ['BOTOS_DATABASE_USERNAME']
    db_password = os.environ['BOTOS_DATABASE_PASSWORD']
    db_test_database = os.environ['BOTOS_TEST_DATABASE_NAME']
except KeyError as e:
    sys.exit('Environment variable, {}, does not exist. '.format(e.args[0])
             + 'Make sure you have created such a variable.')
else:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql',
            'HOST': db_host,
            'PORT': db_port,
            'NAME': db_name,
            'USER': db_username,
            'PASSWORD': db_password,
            'TEST': {
                'NAME': db_test_database
            }
        }
    }

# Static and media roots setup
if not DEBUG:
    try:
        static_root_val = os.environ['BOTOS_STATIC_ROOT']
    except KeyError:
        sys.exit('Environment variable, BOTOS_STATIC_ROOT, does not exist! ' \
                 'And in a production environment?! Outrageous!')
    else:
        STATIC_ROOT = static_root_val

    try:
        media_root_val = os.environ['BOTOS_MEDIA_ROOT']
    except KeyError:
        sys.exit('Environment variable, BOTOS_MEDIA_ROOT, does not exist! ' \
                 'And in a production environment?! Outrageous!')
    else:
        MEDIA_ROOT = media_root_val

# Allowed hosts setup
if DEBUG:
    ALLOWED_HOSTS = []
else:
    try:
        allowed_hosts_val = os.environ['BOTOS_ALLOWED_HOSTS']
    except KeyError:
        sys.exit('Environment variable, BOTOS_ALLOWED_HOSTS, does not exist!' \
                 'And in an production environment?! Outrageous!')
    else:
        MEDIA_ROOT = allowed_hosts_val.split(',')

# Application definitions
INSTALLED_APPS = [
    'core',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.staticfiles',
    'django.contrib.messages',
    'django.contrib.admin'
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'botos.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [ os.path.join(BASE_DIR, 'botos/templates') ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'core.context_processors.get_template'
            ],
        },
    },
]

WSGI_APPLICATION = 'botos.wsgi.application'

# Password validation
# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True

STATIC_URL = '/static/'

# Additional directories for collectstatic to look in.
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'botos/templates/'),
]

# Media URL. Primarily the directory and URL for the user-uploaded files.
MEDIA_URL = '/media/'

# Set custom user model.
AUTH_USER_MODEL = 'core.User'

# Set up login-specific information.
LOGIN_REQUIRED_URL = '/'
LOGIN_URL = '/'
